{"version":3,"sources":["Loader.js","Loader2.js","Loader3.js","Display.js","App.js","reportWebVitals.js","index.js"],"names":["Scene","props","gltf","useLoader","GLTFLoader","OrbitControls","object","scene","onDoubleClick","showDetails","Kurek","useState","active","setActive","myMesh","useRef","gltfcopy","useMemo","clone","useSpring","rotation","Math","PI","position","config","duration","mesh","onClick","ref","dispose","Kurek2","Display","className","style","visibility","isVisible","closeDisplay","App","showA","setShow","showB","setShowB","isDisplay","setIsDisplay","camera","fov","near","far","fallback","id","event","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2862f09d.chunk.js","sourcesContent":["\nimport { useLoader } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { OrbitControls } from \"@react-three/drei\";\n\nexport function Scene(props) {\n    //const gltf = useLoader(GLTFLoader, '/zawor_kulowy_three_kula1.glb')\n    const gltf = useLoader(GLTFLoader, '/zawor_kulowy_three_kula3_korpus.glb')\n    return (\n      <>\n        <OrbitControls />\n        <primitive object={gltf.scene} onDoubleClick={props.showDetails}/>\n      </>\n    )\n  }","\n\nimport { useLoader} from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { OrbitControls } from \"@react-three/drei\";\nimport {  useRef, useMemo, useState } from 'react';\nimport { useSpring, animated } from '@react-spring/three'\n\n\n\nexport function Kurek(props) {\n  const [active, setActive]=useState(false)\n  const myMesh = useRef();\n  const gltf = useLoader(GLTFLoader, '/zawor_kulowy_three_kula3_kurek_blue.glb')\n  const gltfcopy = useMemo(() => gltf.scene.clone(), [gltf.scene])\n\n  //animatio segment start\n  //add change position\n  const {rotation,position}= useSpring({ rotation: active ? [0,0,0] : [0,Math.PI/2,0], position: active ?[0,0,0] : [-0.05,0,-0.07] ,config: { duration: 3000 }  })\n \n  // animation segment end\n\n  return (\n    <>\n      <OrbitControls />\n      <animated.mesh rotation={rotation} position={position} onClick={() => setActive(!active)} ref={myMesh}>\n      <primitive object={gltfcopy} dispose={null} />\n      </animated.mesh>\n    </>\n  )\n}","\n\nimport { useLoader } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { OrbitControls } from \"@react-three/drei\";\nimport {  useRef,useState } from 'react';\nimport { useSpring, animated } from '@react-spring/three'\nimport React from 'react';\n\n\nexport function Kurek2(props) {\n  const [active, setActive]=useState(false)\n  const myMesh = useRef();\n  const gltf = useLoader(GLTFLoader, '/zawor_kulowy_three_kula3_kurek.glb')\n  //animatio segment start\n  const {rotation,position}= useSpring({ rotation: active ? [0,0,0] : [0,Math.PI/2,0], position: active ?[0,0,0] : [-0.05,0,-0.07], config: { duration: 3000 } })\n  \n \n  // animation segment end\n\n  return (\n    <>\n      <OrbitControls />\n      <animated.mesh rotation={rotation} position={position}  ref={myMesh}>\n      <primitive object={gltf.scene} dispose={null}  onClick={() => setActive(!active)} />\n      </animated.mesh>\n     \n    </>\n  )\n}","\n\nexport function Display(props){\n    return(\n        <div className={'display'} style={{visibility:props.isVisible}}>\n            Info\n            <div onClick={props.closeDisplay} >close</div>\n        </div>\n    )\n}","\nimport './App.css';\n//import {useState} from 'react'\nimport { Suspense, useState } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { Scene } from './Loader';\nimport { Kurek } from './Loader2';\nimport { Kurek2 } from './Loader3';\nimport { Display } from './Display';\n\n\n\nfunction App() {\n\n  const [showA, setShow] = useState(true);\n  const [showB, setShowB] = useState(false);\n  const [isDisplay, setIsDisplay] = useState(false)\n\n  function changekurek() {\n    setShowB(!showB);\n    setShow(!showA)\n  }\n\n  \n\n  function showDetailsFunc() {\n    setIsDisplay(true)\n  }\n\n  function closeDetails(){\n    setIsDisplay(false)\n  }\n\n  return (\n    <div>\n      <Canvas camera={{ fov: 75, near: 0.1, far: 1000, position: [0, 0, 4] }}>\n        <Suspense fallback={null}>\n          <ambientLight />\n          <pointLight position={[10, 20, 10]} />\n          <pointLight position={[-5, -15, 30]} />\n\n          <Scene showDetails={showDetailsFunc}/>\n\n          {showB && <Kurek2  />}\n          {showA && <Kurek  />}\n\n        </Suspense>\n      </Canvas>\n      <button id={'buttonkurek'} onClick={(event) => changekurek()}>Color</button>\n      \n      <Display isVisible={isDisplay ? 'visible' : 'hidden'} closeDisplay={closeDetails} />\n      <p className={'instruction'}>[Click on color part to open/close valve]</p>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}